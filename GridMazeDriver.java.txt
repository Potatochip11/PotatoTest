import java.util.ArrayList;
import java.util.List;
import java.awt.Point;

public class GridMazeDriver
{
    public static void main (String[] args)
    {
        ArrayList<Point> list = new ArrayList<Point>();
        int blocks=0;
        int degree=1;
        int totalDegree=1;
        GridMaze grid = new GridMaze(45);
        int rows=0;
        int cols=0;
        grid.switchOff(rows, cols);
        grid.printFancy();
        int moves=0;
        while(!grid.isDone(cols))
        {
            GridMaze test=grid;
            int rand=(int)(4*Math.random());
            if(rand==0 && grid.validLocation(rows-1,cols,rows,cols) && !test.willBlock(rows-1,cols,rows,cols,test))
            {
                grid.switchOff(rows-1,cols);
                Point pt = new Point(rows-1,cols);
                list.add(pt);
                rows-=1;
                blocks=0;
                grid.printFancy();
                moves++;
            }
            else if(rand==1 && grid.validLocation(rows,cols+1,rows,cols) && !test.willBlock(rows,cols+1,rows,cols,test))
            {
                grid.switchOff(rows,cols+1);
                Point pt = new Point(rows,cols+1);
                list.add(pt);
                cols+=1;
                blocks=0;
                grid.printFancy();
                moves++;
            }
            else if(rand==2 && grid.validLocation(rows+1,cols,rows,cols) && !test.willBlock(rows+1,cols,rows,cols,test))
            {
                grid.switchOff(rows+1,cols);
                Point pt = new Point(rows+1,cols);
                list.add(pt);
                rows+=1;
                blocks=0;
                grid.printFancy();
                moves++;
            }
            else if(rand==3 && grid.validLocation(rows,cols-1,rows,cols) && !test.willBlock(rows,cols-1,rows,cols,test))
            {
                grid.switchOff(rows,cols-1);
                Point pt = new Point(rows,cols-1);
                list.add(pt);
                cols-=1;
                blocks=0;
                grid.printFancy();
                moves++;
            }
            else 
            {
                blocks++;
            }
            if(blocks>30)
            {
                blocks=0;
                for(int i=degree;i>0;i--)
                {
                    //System.out.println(list);
                    if(list.size()<degree)
                    {
                        degree=list.size()-1;
                    }
                    grid.undo((int)(list.get(list.size()-1).getX()),(int)(list.get(list.size()-1).getY()),degree);
                    list.remove(list.size()-1);
                    rows=(int)(list.get(list.size()-1).getX());
                    cols=(int)(list.get(list.size()-1).getY());
                }
                degree++;
                totalDegree++;
                //for(int i=0;i<47;i++)
                //    System.out.println("---------------------------------------------");
                grid.printFancy();
                moves=0;
            }
            if(moves>=degree+5 && totalDegree<25)
            {
                degree=1;
            }
        }
        grid.printFancy();
    }
}
